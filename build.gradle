plugins {
    id 'fabric-loom' version '0d0261a'
    id "io.freefair.lombok" version "6.4.3"
}

version = "${project.mod_version}+mc${project.minecraft_version}"
group = project.maven_group

repositories {
    maven {
        name 'Jitpack'
        url 'https://jitpack.io/'
    }
    maven {
        name 'HalfOf2'
        url 'https://storage.googleapis.com/devan-maven/'
    }
}

minecraft {
    // Skip old versions of libraries which Mojang use but we don't need
    addLibraryFilter {library ->
        return !(library.startsWith('net.minecraft:launchwrapper:') ||
                library.startsWith('net.sf.jopt-simple:jopt-simple:') ||
                library.startsWith('org.ow2.asm:asm-all:'))
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "io.github.minecraft-cursed-legacy:plasma:b1.7.3-build.${project.plasma_build}"
    modImplementation("io.github.minecraft-cursed-legacy:cursed-fabric-loader:${project.loader_version}") {
        transitive false
    }

    // API. You technically don't need it, but it's extremely useful for not having to write the same code in every mod.
    modImplementation "io.github.minecraft-cursed-legacy:cursed-legacy-api:${project.api_version}"
    include implementation("com.moandjiezana.toml:toml4j:${project.toml4j_version}")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 8
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
